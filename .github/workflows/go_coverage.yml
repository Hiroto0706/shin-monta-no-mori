name: Go Test Coverage by Directory

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - "**/*_test.go"

jobs:
  test_coverage:
    name: Go Test and Coverage Report
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.22.2"

      - name: Create credential.json
        run: echo "${{ secrets.CREDENTIAL_JSON }}" > ./server/credential.json

      - name: Launch services
        env:
          ENVIRONMENT: test
        run: docker compose up -d

      - name: Install Migrate Tool
        run: go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest

      - name: Set execute permission for the script
        run: chmod +x ./tools/aggregate_coverage.sh

      - name: Run Go Test and generate coverage
        env:
          TEST_DATABASE_URL: postgresql://postgres:password@localhost:5432/shin-monta-no-mori-test?sslmode=disable
        run: |
          # テスト実行環境の構築
          docker exec db dropdb --username=postgres --if-exists shin-monta-no-mori-test
          docker exec db createdb --username=postgres --owner=postgres shin-monta-no-mori-test
          migrate -path server/internal/db/migration -database "${{ env.TEST_DATABASE_URL }}" -verbose up
          mkdir -p ./server/coverage

          # 各サブディレクトリのテストを実行し、個別のカバレッジファイルを生成
          cd server && go test ./api/admin/... -coverprofile=./coverage/api_admin.out
          cd server && go test ./api/user/... -coverprofile=./coverage/api_user.out
          cd server && go test ./api/middleware/... -coverprofile=./coverage/api_middleware.out
          cd server && go test ./pkg/... -coverprofile=./coverage/pkg.out
          cd server && go test ./internal/db/... -coverprofile=./coverage/db.out
          cd server && go test ./internal/domains/... -coverprofile=./coverage/domains.out

          # カバレッジファイルの結合
          echo "mode: set" > ./server/coverage/coverage.out
          tail -n +2 ./server/coverage/api_admin.out >> ./server/coverage/coverage.out
          tail -n +2 ./server/coverage/api_user.out >> ./server/coverage/coverage.out
          tail -n +2 ./server/coverage/api_middleware.out >> ./server/coverage/coverage.out
          tail -n +2 ./server/coverage/pkg.out >> ./server/coverage/coverage.out
          tail -n +2 ./server/coverage/db.out >> ./server/coverage/coverage.out
          tail -n +2 ./server/coverage/domains.out >> ./server/coverage/coverage.out

          # テスト結果の集計・出力
          cd server && go tool cover -func=./coverage/coverage.out > ./coverage/report.txt
          cd server && go tool cover -html=./coverage/coverage.out -o ./coverage/coverage.html
          ./tools/aggregate_coverage.sh ./server/coverage/report.txt
          echo "COVERAGE_REPORT<<EOF" >> $GITHUB_ENV
          cat coverage/summary.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Stop and remove services
        run: docker-compose down

      - name: Post coverage results to PR
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Test Coverage Report
            ```
            ${{ env.COVERAGE_REPORT }}
            ```
