// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: parent_categories.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const countParentCategories = `-- name: CountParentCategories :one
SELECT count(*)
FROM parent_categories
`

func (q *Queries) CountParentCategories(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countParentCategories)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSearchParentCategories = `-- name: CountSearchParentCategories :one
SELECT DISTINCT count(*)
FROM parent_categories
WHERE name LIKE '%' || COALESCE($1) || '%'
  OR filename LIKE '%' || COALESCE($1) || '%'
`

func (q *Queries) CountSearchParentCategories(ctx context.Context, query sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, countSearchParentCategories, query)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createParentCategory = `-- name: CreateParentCategory :one
INSERT INTO parent_categories (name, src, filename, priority_level)
VALUES ($1, $2, $3, $4)
RETURNING id, name, src, updated_at, created_at, filename, priority_level
`

type CreateParentCategoryParams struct {
	Name          string         `json:"name"`
	Src           string         `json:"src"`
	Filename      sql.NullString `json:"filename"`
	PriorityLevel int16          `json:"priority_level"`
}

func (q *Queries) CreateParentCategory(ctx context.Context, arg CreateParentCategoryParams) (ParentCategory, error) {
	row := q.db.QueryRowContext(ctx, createParentCategory,
		arg.Name,
		arg.Src,
		arg.Filename,
		arg.PriorityLevel,
	)
	var i ParentCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Src,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Filename,
		&i.PriorityLevel,
	)
	return i, err
}

const deleteParentCategory = `-- name: DeleteParentCategory :exec
DELETE FROM parent_categories
WHERE id = $1
`

func (q *Queries) DeleteParentCategory(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteParentCategory, id)
	return err
}

const getParentCategory = `-- name: GetParentCategory :one
SELECT id, name, src, updated_at, created_at, filename, priority_level
FROM parent_categories
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetParentCategory(ctx context.Context, id int64) (ParentCategory, error) {
	row := q.db.QueryRowContext(ctx, getParentCategory, id)
	var i ParentCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Src,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Filename,
		&i.PriorityLevel,
	)
	return i, err
}

const listAllParentCategories = `-- name: ListAllParentCategories :many
SELECT id, name, src, updated_at, created_at, filename, priority_level
FROM parent_categories
ORDER BY id DESC
`

func (q *Queries) ListAllParentCategories(ctx context.Context) ([]ParentCategory, error) {
	rows, err := q.db.QueryContext(ctx, listAllParentCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ParentCategory{}
	for rows.Next() {
		var i ParentCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Src,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.Filename,
			&i.PriorityLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listParentCategories = `-- name: ListParentCategories :many
SELECT id, name, src, updated_at, created_at, filename, priority_level
FROM parent_categories
ORDER BY id DESC
LIMIT $1 OFFSET $2
`

type ListParentCategoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListParentCategories(ctx context.Context, arg ListParentCategoriesParams) ([]ParentCategory, error) {
	rows, err := q.db.QueryContext(ctx, listParentCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ParentCategory{}
	for rows.Next() {
		var i ParentCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Src,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.Filename,
			&i.PriorityLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchParentCategories = `-- name: SearchParentCategories :many
SELECT DISTINCT id, name, src, updated_at, created_at, filename, priority_level
FROM parent_categories
WHERE name LIKE '%' || COALESCE($1) || '%'
  OR filename LIKE '%' || COALESCE($1) || '%'
ORDER BY id DESC
`

func (q *Queries) SearchParentCategories(ctx context.Context, query sql.NullString) ([]ParentCategory, error) {
	rows, err := q.db.QueryContext(ctx, searchParentCategories, query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ParentCategory{}
	for rows.Next() {
		var i ParentCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Src,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.Filename,
			&i.PriorityLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateParentCategory = `-- name: UpdateParentCategory :one
UPDATE parent_categories
SET name = $2,
  src = $3,
  filename = $4,
  updated_at = $5,
  priority_level = $6
WHERE id = $1
RETURNING id, name, src, updated_at, created_at, filename, priority_level
`

type UpdateParentCategoryParams struct {
	ID            int64          `json:"id"`
	Name          string         `json:"name"`
	Src           string         `json:"src"`
	Filename      sql.NullString `json:"filename"`
	UpdatedAt     time.Time      `json:"updated_at"`
	PriorityLevel int16          `json:"priority_level"`
}

func (q *Queries) UpdateParentCategory(ctx context.Context, arg UpdateParentCategoryParams) (ParentCategory, error) {
	row := q.db.QueryRowContext(ctx, updateParentCategory,
		arg.ID,
		arg.Name,
		arg.Src,
		arg.Filename,
		arg.UpdatedAt,
		arg.PriorityLevel,
	)
	var i ParentCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Src,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Filename,
		&i.PriorityLevel,
	)
	return i, err
}
