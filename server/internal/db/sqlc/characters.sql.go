// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: characters.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createCharacter = `-- name: CreateCharacter :one
INSERT INTO characters (name, src, filename)
VALUES ($1, $2, $3)
RETURNING id, name, src, updated_at, created_at, filename
`

type CreateCharacterParams struct {
	Name     string         `json:"name"`
	Src      string         `json:"src"`
	Filename sql.NullString `json:"filename"`
}

func (q *Queries) CreateCharacter(ctx context.Context, arg CreateCharacterParams) (Character, error) {
	row := q.db.QueryRowContext(ctx, createCharacter, arg.Name, arg.Src, arg.Filename)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Src,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Filename,
	)
	return i, err
}

const deleteCharacter = `-- name: DeleteCharacter :exec
DELETE FROM characters
WHERE id = $1
`

func (q *Queries) DeleteCharacter(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCharacter, id)
	return err
}

const getCharacter = `-- name: GetCharacter :one
SELECT id, name, src, updated_at, created_at, filename
FROM characters
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCharacter(ctx context.Context, id int64) (Character, error) {
	row := q.db.QueryRowContext(ctx, getCharacter, id)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Src,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Filename,
	)
	return i, err
}

const listCharacters = `-- name: ListCharacters :many
SELECT id, name, src, updated_at, created_at, filename
FROM characters
ORDER BY id DESC
LIMIT $1 OFFSET $2
`

type ListCharactersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCharacters(ctx context.Context, arg ListCharactersParams) ([]Character, error) {
	rows, err := q.db.QueryContext(ctx, listCharacters, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Character{}
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Src,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.Filename,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchCharacters = `-- name: SearchCharacters :many
SELECT DISTINCT id, name, src, updated_at, created_at, filename
FROM characters
WHERE name LIKE '%' || COALESCE($3) || '%'
  OR filename LIKE '%' || COALESCE($3) || '%'
ORDER BY id DESC
LIMIT $1 OFFSET $2
`

type SearchCharactersParams struct {
	Limit  int32          `json:"limit"`
	Offset int32          `json:"offset"`
	Query  sql.NullString `json:"query"`
}

func (q *Queries) SearchCharacters(ctx context.Context, arg SearchCharactersParams) ([]Character, error) {
	rows, err := q.db.QueryContext(ctx, searchCharacters, arg.Limit, arg.Offset, arg.Query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Character{}
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Src,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.Filename,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCharacter = `-- name: UpdateCharacter :one
UPDATE characters
SET name = $2,
  src = $3,
  filename = $4,
  updated_at = $5
WHERE id = $1
RETURNING id, name, src, updated_at, created_at, filename
`

type UpdateCharacterParams struct {
	ID        int64          `json:"id"`
	Name      string         `json:"name"`
	Src       string         `json:"src"`
	Filename  sql.NullString `json:"filename"`
	UpdatedAt time.Time      `json:"updated_at"`
}

func (q *Queries) UpdateCharacter(ctx context.Context, arg UpdateCharacterParams) (Character, error) {
	row := q.db.QueryRowContext(ctx, updateCharacter,
		arg.ID,
		arg.Name,
		arg.Src,
		arg.Filename,
		arg.UpdatedAt,
	)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Src,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Filename,
	)
	return i, err
}
