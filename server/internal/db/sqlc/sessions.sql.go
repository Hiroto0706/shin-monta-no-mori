// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: sessions.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    id,
    name,
    email,
    refresh_token,
    expires_at,
    user_agent,
    client_ip
  )
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, name, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at, email
`

type CreateSessionParams struct {
	ID           uuid.UUID      `json:"id"`
	Name         string         `json:"name"`
	Email        sql.NullString `json:"email"`
	RefreshToken string         `json:"refresh_token"`
	ExpiresAt    time.Time      `json:"expires_at"`
	UserAgent    string         `json:"user_agent"`
	ClientIp     string         `json:"client_ip"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.RefreshToken,
		arg.ExpiresAt,
		arg.UserAgent,
		arg.ClientIp,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.Email,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, name, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at, email
FROM sessions
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.Email,
	)
	return i, err
}
