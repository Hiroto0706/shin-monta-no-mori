// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: image_characters.sql

package db

import (
	"context"
)

const createImageCharacterRelations = `-- name: CreateImageCharacterRelations :one
INSERT INTO image_characters_relations (image_id, character_id)
VALUES ($1, $2)
RETURNING id, image_id, character_id
`

type CreateImageCharacterRelationsParams struct {
	ImageID     int64 `json:"image_id"`
	CharacterID int64 `json:"character_id"`
}

func (q *Queries) CreateImageCharacterRelations(ctx context.Context, arg CreateImageCharacterRelationsParams) (ImageCharactersRelation, error) {
	row := q.db.QueryRowContext(ctx, createImageCharacterRelations, arg.ImageID, arg.CharacterID)
	var i ImageCharactersRelation
	err := row.Scan(&i.ID, &i.ImageID, &i.CharacterID)
	return i, err
}

const deleteAllImageCharacterRelationsByCharacterID = `-- name: DeleteAllImageCharacterRelationsByCharacterID :exec
DELETE FROM image_characters_relations
WHERE character_id = $1
`

func (q *Queries) DeleteAllImageCharacterRelationsByCharacterID(ctx context.Context, characterID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAllImageCharacterRelationsByCharacterID, characterID)
	return err
}

const deleteAllImageCharacterRelationsByImageID = `-- name: DeleteAllImageCharacterRelationsByImageID :exec
DELETE FROM image_characters_relations
WHERE image_id = $1
`

func (q *Queries) DeleteAllImageCharacterRelationsByImageID(ctx context.Context, imageID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAllImageCharacterRelationsByImageID, imageID)
	return err
}

const deleteImageCharacterRelations = `-- name: DeleteImageCharacterRelations :exec
DELETE FROM image_characters_relations
WHERE id = $1
`

func (q *Queries) DeleteImageCharacterRelations(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteImageCharacterRelations, id)
	return err
}

const listImageCharacterRelationsByCharacterIDWIthPagination = `-- name: ListImageCharacterRelationsByCharacterIDWIthPagination :many
SELECT id, image_id, character_id
FROM image_characters_relations
WHERE character_id = $3
ORDER BY character_id DESC
LIMIT $1 OFFSET $2
`

type ListImageCharacterRelationsByCharacterIDWIthPaginationParams struct {
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
	CharacterID int64 `json:"character_id"`
}

func (q *Queries) ListImageCharacterRelationsByCharacterIDWIthPagination(ctx context.Context, arg ListImageCharacterRelationsByCharacterIDWIthPaginationParams) ([]ImageCharactersRelation, error) {
	rows, err := q.db.QueryContext(ctx, listImageCharacterRelationsByCharacterIDWIthPagination, arg.Limit, arg.Offset, arg.CharacterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ImageCharactersRelation{}
	for rows.Next() {
		var i ImageCharactersRelation
		if err := rows.Scan(&i.ID, &i.ImageID, &i.CharacterID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listImageCharacterRelationsByImageID = `-- name: ListImageCharacterRelationsByImageID :many
SELECT id, image_id, character_id
FROM image_characters_relations
WHERE image_id = $1
ORDER BY image_id DESC
`

func (q *Queries) ListImageCharacterRelationsByImageID(ctx context.Context, imageID int64) ([]ImageCharactersRelation, error) {
	rows, err := q.db.QueryContext(ctx, listImageCharacterRelationsByImageID, imageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ImageCharactersRelation{}
	for rows.Next() {
		var i ImageCharactersRelation
		if err := rows.Scan(&i.ID, &i.ImageID, &i.CharacterID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateImageCharacterRelations = `-- name: UpdateImageCharacterRelations :one
UPDATE image_characters_relations
SET image_id = $2,
  character_id = $3
WHERE id = $1
RETURNING id, image_id, character_id
`

type UpdateImageCharacterRelationsParams struct {
	ID          int64 `json:"id"`
	ImageID     int64 `json:"image_id"`
	CharacterID int64 `json:"character_id"`
}

func (q *Queries) UpdateImageCharacterRelations(ctx context.Context, arg UpdateImageCharacterRelationsParams) (ImageCharactersRelation, error) {
	row := q.db.QueryRowContext(ctx, updateImageCharacterRelations, arg.ID, arg.ImageID, arg.CharacterID)
	var i ImageCharactersRelation
	err := row.Scan(&i.ID, &i.ImageID, &i.CharacterID)
	return i, err
}
