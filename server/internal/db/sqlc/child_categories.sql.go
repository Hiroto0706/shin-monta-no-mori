// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: child_categories.sql

package db

import (
	"context"
)

const createChildCategories = `-- name: CreateChildCategories :one
INSERT INTO child_categories (name, parent_id)
VALUES ($1, $2)
RETURNING id, name, parent_id, updated_at, created_at
`

type CreateChildCategoriesParams struct {
	Name     string `json:"name"`
	ParentID int64  `json:"parent_id"`
}

func (q *Queries) CreateChildCategories(ctx context.Context, arg CreateChildCategoriesParams) (ChildCategory, error) {
	row := q.db.QueryRowContext(ctx, createChildCategories, arg.Name, arg.ParentID)
	var i ChildCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteChildCategories = `-- name: DeleteChildCategories :exec
DELETE FROM child_categories
WHERE id = $1
`

func (q *Queries) DeleteChildCategories(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteChildCategories, id)
	return err
}

const getChildCategories = `-- name: GetChildCategories :one
SELECT id, name, parent_id, updated_at, created_at
FROM child_categories
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetChildCategories(ctx context.Context, id int64) (ChildCategory, error) {
	row := q.db.QueryRowContext(ctx, getChildCategories, id)
	var i ChildCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listChildCategories = `-- name: ListChildCategories :many
SELECT id, name, parent_id, updated_at, created_at
FROM child_categories
ORDER BY id DESC
LIMIT $1 OFFSET $2
`

type ListChildCategoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListChildCategories(ctx context.Context, arg ListChildCategoriesParams) ([]ChildCategory, error) {
	rows, err := q.db.QueryContext(ctx, listChildCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ChildCategory{}
	for rows.Next() {
		var i ChildCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ParentID,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChildCategories = `-- name: UpdateChildCategories :one
UPDATE child_categories
SET name = $2,
  parent_id = $3
WHERE id = $1
RETURNING id, name, parent_id, updated_at, created_at
`

type UpdateChildCategoriesParams struct {
	ID       int64  `json:"id"`
	Name     string `json:"name"`
	ParentID int64  `json:"parent_id"`
}

func (q *Queries) UpdateChildCategories(ctx context.Context, arg UpdateChildCategoriesParams) (ChildCategory, error) {
	row := q.db.QueryRowContext(ctx, updateChildCategories, arg.ID, arg.Name, arg.ParentID)
	var i ChildCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
