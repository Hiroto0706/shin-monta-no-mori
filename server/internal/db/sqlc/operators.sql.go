// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: operators.sql

package db

import (
	"context"
)

const createOperator = `-- name: CreateOperator :one
INSERT INTO operators (name, hashed_password, email)
VALUES ($1, $2, $3)
RETURNING id, name, hashed_password, email, created_at
`

type CreateOperatorParams struct {
	Name           string `json:"name"`
	HashedPassword string `json:"hashed_password"`
	Email          string `json:"email"`
}

func (q *Queries) CreateOperator(ctx context.Context, arg CreateOperatorParams) (Operator, error) {
	row := q.db.QueryRowContext(ctx, createOperator, arg.Name, arg.HashedPassword, arg.Email)
	var i Operator
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.HashedPassword,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getOperatorByEmail = `-- name: GetOperatorByEmail :one
SELECT id, name, hashed_password, email, created_at
FROM operators
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetOperatorByEmail(ctx context.Context, email string) (Operator, error) {
	row := q.db.QueryRowContext(ctx, getOperatorByEmail, email)
	var i Operator
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.HashedPassword,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const updateOperator = `-- name: UpdateOperator :one
UPDATE operators
SET name = $2,
  hashed_password = $3,
  email = $4
WHERE id = $1
RETURNING id, name, hashed_password, email, created_at
`

type UpdateOperatorParams struct {
	ID             int64  `json:"id"`
	Name           string `json:"name"`
	HashedPassword string `json:"hashed_password"`
	Email          string `json:"email"`
}

func (q *Queries) UpdateOperator(ctx context.Context, arg UpdateOperatorParams) (Operator, error) {
	row := q.db.QueryRowContext(ctx, updateOperator,
		arg.ID,
		arg.Name,
		arg.HashedPassword,
		arg.Email,
	)
	var i Operator
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.HashedPassword,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
